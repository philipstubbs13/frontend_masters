---
  import Layout from './Layout.astro';
  import DividerGrid from '../components/DividerGrid.astro';
  import TableOfContents from '../components/TableOfContents.astro';

  export interface Props {
    content: {
      title: string;
      order: number;
      subtitle: string;
      previous: {
        name: string;
        href: string;
      },
      next: {
        name: string;
        href: string;
      },
      astro: {
        headers: { depth: string; slug: string; text: string; }[];
      }
    };
  }

  const { content } = Astro.props as Props;
  const { url } = Astro.request;
---

<Layout title={content.title}>
  <div class="content-subgrid headline">
    <div class="row">
      <h2>{content.order}| {content.title}</h2>
      <p class="pull-text" set:html={content.subtitle}></p>
    </div>
    <nav>
      <div>
        <span>Prev:</span>
        <a href={content.previous.href}>{content.previous.name}</a>
      </div>
      /
      <div>
        <span>Next:</span>
        <a href={content.next.href}>{content.next.name}</a>
      </div>
    </nav>
  </div>
  <DividerGrid />

  <div class="content-subgrid content">
    <TableOfContents headers={content.astro.headers} pathname={url} />
    <slot />
  </div>
  <div class="content-subgrid next-prev">
    <nav>
      <div>
        Previous: <a href={content.previous.href}>{content.previous.name}</a>
      </div>
      <div>
        Next: <a href={content.next.href}>{content.next.name}</a>
      </div>
    </nav>
  </div>

</Layout>
<dialog id="slideBg">

<nav class="pager"></nav>
</dialog>

<style>
  h2 {
    font-size: clamp(2rem, 8vw - 1rem, 4.5rem);
    margin-block-end: var(--space-xs);
  }

  .content {
    column-gap: var(--space-3xl);
  }

  :global(.content h4) {
    grid-column: content;
    margin-block: var(--space-md) 0;
  }

  :global(.content h5) {
    margin-block-end: var(--space-xxs);
    margin-block-start: var(--space-xs);
    color: var(--gray-5);
  }

  :global(.content p + .astro-code) {
    margin-block-start: 24px;
  }

  :global(.content h4:not(:first-of-type)) {
    margin-block-start: var(--space-md);
  }

  :global(.content > *) {
    grid-column: content;
  }

  :global(.content p) {
    line-height: 1.5;
    margin-block-end: 28px;
  }

  :global(.content h4 + p) {
    margin-block-start: var(--space-md);
  }

  :global(.content h5 ~ p) {
    margin-block-end: 14px;
  }

  :global(.content ul) {
    list-style-type: disc;
    padding-inline-start: var(--space-lg);
    margin-block-end: 28px;
    display: grid;
    gap: var(--space-sm);
  }

  :global(.content ol),
  :global(.slide ol) {
    list-style-type: decimal;
    padding-inline-start: var(--space-lg);
    margin-block: 28px 42px;
    display: grid;
    gap: var(--space-sm);
  }

  :global(.slide ol) {
    font-size: 1.75rem;
  }

  :global(.content img) {
    margin-block: var(--space-lg);
    max-width: 100%;
  }

  .headline {
    gap: var(--space-md);
    margin-block-start: var(--space-3xl);
  }

  .row {
    grid-column: full;
  }

  .headline nav {
    display: flex;
    gap: var(--space-md);
    font-size: 1rem;
    color: var(--gray-6);
    flex-wrap: wrap;
  }

  .headline nav a {
    text-decoration: underline;
  }

  .headline nav div {
    display: flex;
    gap: var(--space-xxs);
  }

  .next-prev {
    grid-column: content;
    margin-block: var(--space-3xl);
  }

  .next-prev nav {
    display: flex;
    justify-content: space-between;
    color: var(--gray-6);
  }

  .next-prev nav a {
    color: var(--orange-5);
    text-decoration: underline;
  }

  :global(.content del) {
    color: var(--gray-3);
  }

  :global(.astro-code) {
    background-color: #0d1117;
    overflow-x: auto;
    font-family: var(--font-mono-code);
    line-height: 1.5;
    margin-block: var(--space-lg);
    padding: var(--space-md);
    grid-column: content;
    border-radius: 8px;
    z-index: 2;
  }

  :global(.astro-code),
  :global(.content ul.code-callout) {
    margin-inline-end: -368px;
  }

  :global(p + .astro-code),
  :global(blockquote + .astro-code) {
    margin-block: 0 var(--space-lg);
  }

  :global(.content p > code),
  :global(.content ul li > code) {
    font-family: var(--font-mono);
    background: var(--black-4);
    padding: 4px;
    border-radius: 4px;
  }

  @media(max-width: 1060px) {

    :global(.astro-code),
    :global(.content ul.code-callout) {
      grid-column: content;
      margin-inline-end: 0px;
    }
  }

  dialog:not([open])#slideBg {
    opacity: 0;
    height: 0vh;
    max-height: 0vh;
    pointer-events: none;
  }

  #slideBg {
    height: 100vh;
    max-height: 100vh;
    border: 0;
    width: 100vw;
    background-color: var(--theme-bg);
    max-width: 100vw;
    color: var(--theme-text);
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
  }

  :global(.slide) {
    display: none;
    height: 100%;
  }

  :global(dialog .slide:first-child) {
    display: flex;
    width: var(--content-grid-width);
  }

  :global(.slide[data-type="main"]) {
    flex-direction: column;
    justify-content: center;
    padding-inline: var(--space-lg);
    gap: var(--space-2xl);
  }

  :global(.slide[data-type="main"] ul) {
    display: grid;
    line-height: 1.5;
    list-style-type: disc;
    padding-inline-start: 20px;
    font-size: 1.5rem;
  }

  :global(.slide[data-type="main"] ul li a) {
    color: var(--orange-5);
  }

  :global(.slide .title) {
    font-family: var(--font-body);
    font-size: 3.25rem;
    line-height: 1.35;
  }

  :global(.slide .side-grid) {
    display: grid;
    grid-template-columns: 1fr 1fr;
    align-items: center;
    gap: var(--space-4xl);
  }

  :global(.slide .side-grid.intro) {
    display: grid;
    grid-template-columns: 1fr 2.5fr;
    align-items: center;
    gap: var(--space-4xl);
  }

  :global(.slide .side-grid.firestore) {
    display: grid;
    grid-template-columns: 1.5fr 2fr;
    align-items: center;
    gap: var(--space-4xl);
  }

  :global(.slide .numeric-side) {
    display: grid;
    gap: var(--space-xs);
    border-right: 2px solid var(--orange-5);
  }

  :global(.numeric) {
    font-family: var(--font-mono);
  }

  :global(.mega-number) {
    font-family: var(--font-mono);
    font-size: 6rem;
    font-weight: bold;
  }

  :global(.subtitle) {
    font-size: 1.75rem;
    line-height: 1.5;
  }

  :global(.mega-title) {
    font-size: 6.5rem;
    font-family: var(--font-mono);
    font-weight: bold;
    line-height: 1.35;
  }

  :global(.main-title) {
    font-size: 4.5rem;
    font-family: var(--font-mono);
    font-weight: bold;
    line-height: 1.35;
  }

  :global(dialog .slide figure.photo-quote) {
    justify-content: flex-start;
  }

  :global(dialog .slide .slide-label),
  :global(dialog nav.pager ul) {
    font-family: var(--font-mono);
    font-size: .75rem;
    letter-spacing: 1px;
    text-transform: uppercase;
    color: var(--gray-5);
  }
  :global(dialog .slide .heading-group) {
    display: grid;
    gap: var(--space-xxs);
  }
  :global(dialog nav.pager) {
    position: absolute;
    top: var(--space-md);
    width: var(--content-grid-width);
  }
  :global(dialog nav.pager ul) {
    display: flex;
    justify-content: space-between;
  }
  :global(dialog nav.pager ul li:first-child::before) {
    content: '< ';
  }
  :global(dialog nav.pager ul li:nth-child(2)::after) {
    content: ' >';
  }
  :global(dialog img) {
    max-width: 100%;
  }
  :global(dialog img.height-80) {
    height: 80%;
  }
  :global(dialog img.width-50) {
    width: 50%;
  }
  :global(dialog img.width-90) {
    width: 90%;
  }
  :global(dialog .slide .astro-code) {
    margin-inline: 0;
  }
  :global(dialog .slide.no-gap) {
    gap: 0 !important;
  }
  :global(dialog .slide.no-gap .astro-code) {
    margin-block: 0 !important;
  }
  :global(dialog .slide.total-center) {
    justify-content: center;
    align-items: center;
  }
  :global(.dim) {
    color: var(--gray-5);
  }
  :global(.light-code) {
    font-size: 2.5rem;
    font-family: var(--font-mono);
  }
</style>

<script type="module">
  const dialog = document.querySelector('#slideBg');
  const slides = Array.from(document.querySelectorAll('.slide'));
  const store = localStore(`slide_index_${location.pathname}`);
  externalizeLinks();

  function localStore(key) {
    return {
      get() {
        return parseInt(localStorage.getItem(key) || '0', 10);
      },
      set(value) {
        return localStorage.setItem(key, value.toString())
      }
    }
  }

  function externalizeLinks(links = document.querySelectorAll('.slide a')) {
    Array.from(links).forEach(anchor => {
      anchor.setAttribute('rel', 'noopener');
      anchor.setAttribute('target', '_blank');
    });
  }

  function getCurrentSlide() {
    return document.querySelector('.slide[data-current="true"]');
  }

  function setCurrentSlide({ slide }) {
    slide.setAttribute('data-current', 'true');
  }

  function toggleDialog() {
    dialog.getAttribute('open') == null ?
      dialog.showModal() :
      dialog.close();
  }

  function insertSlide({ slide }) {
    getCurrentSlide()?.remove();
    dialog.prepend(slide);
  }

  function increment({ currentIndex, slides }) {
    return currentIndex < slides.length - 1 ? currentIndex + 1 : currentIndex;
  }

  function decrement({ currentIndex }) {
    return currentIndex > 0 ? currentIndex - 1 : currentIndex;
  }

  function updatePager({ currentIndex }) {
    const pager = document.querySelector('dialog .pager');
    const previousSlideIndex = currentIndex > 0 ? currentIndex - 1 : null;
    const nextSlideIndex = currentIndex < slides.length - 1 ? currentIndex + 1 : null;
    const previousSlide = previousSlideIndex != null ? slides.at(previousSlideIndex) : null;
    const nextSlide = nextSlideIndex != null ? slides.at(nextSlideIndex) : null;
    const ul = document.createElement('ul');
    if(previousSlide) {
      const li = document.createElement('li');
      li.textContent = previousSlide.getAttribute('data-title');
      ul.appendChild(li);
    }

    if(nextSlide) {
      const li = document.createElement('li');
      li.textContent = nextSlide.getAttribute('data-title');
      ul.appendChild(li);
    }
    pager.innerHTML = '';
    pager.appendChild(ul);
  }

  document.addEventListener('keyup', keyupEvent => {
    let currentIndex = store.get();
    if (keyupEvent.key === '.') {
      toggleDialog();
    } else if (keyupEvent.key === 'ArrowRight') {
      store.set(increment({ currentIndex, slides }))
    } else if (keyupEvent.key === 'ArrowLeft') {
      store.set(decrement({ currentIndex }));
    }
    currentIndex = store.get();
    const slide = slides.at(currentIndex);
    insertSlide({ slide });
    setCurrentSlide({ slide });
    updatePager({ currentIndex });
  })
</script>